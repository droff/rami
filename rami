#!/usr/bin/env ruby

require_relative 'lib/rami'
require 'mongo'
require 'yaml'
include Mongo

local_dir = File.dirname(__FILE__)
config = YAML.load_file("#{local_dir}/config.yml")["rami"]

$0 = "RAMI Daemon"
RAMI::Daemon.start(fork, config["pidfile"], "#{local_dir}/#{config["action_log"]}", "#{local_dir}/#{config["error_log"]}")
Signal.trap("HUP")  { $stdout.puts "SIGHUP and exit";  exit }
Signal.trap("INT")  { $stdout.puts "SIGINT and exit";  exit }
Signal.trap("QUIT") { $stdout.puts "SIGQUIT and exit"; exit }

db = Connection.new.db(config["mongo_db"])
events = db.collection(config["mongo_collection"])

login = "Action: login\nUsername: #{config["username"]}\nSecret: #{config["secret"]}\nEvent: on\n\n"

h = {}

Thread.new do
  loop do
    st = RAMI::Listener.new(config["host"], config["port"])
    if st.sock
      st.login(login)
      while !st.sock.closed?
        st.run do
          data = st.data
          begin
            if data =~ /\r\n\r\n$/
              data.split("\r\n\r\n").each do |d|
                h = RAMI::fields(d.split("\r\n"))
                events.insert(h) if h[:event] == "Cdr"
              end
            else
              data += data
            end
          rescue
            puts "[#{Time.now}] #{data}"
          end
        end
      end
      puts "closed"
    end
    sleep 1
  end
end.join
